name: Build and Test (Non-Conda)

on:
  workflow_dispatch:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            sys-package-cache-path: /var/cache/apt/archives
            sys-package-install-command: >
              sudo apt-get update &&
              sudo apt-get install -y libarmadillo-dev libboost-all-dev libgtest-dev ninja-build
            cmake-args: "-D CMAKE_BUILD_TYPE=Release -G Ninja"
            build-args: ""
            test-args: ""
          - os: macos-latest
            sys-package-cache-path: ~/Library/Caches/Homebrew
            sys-package-install-command: brew install armadillo boost googletest
            setup-env-command: |
              echo "FC=$(brew --prefix gcc)/bin/gfortran" >> $GITHUB_ENV
              echo "CMAKE_Fortran_COMPILER=$(brew --prefix gcc)/bin/gfortran" >> $GITHUB_ENV
            cmake-args: "-D CMAKE_BUILD_TYPE=Release -G Ninja"
            build-args: ""
            test-args: ""
          - os: windows-latest
            sys-package-cache-path: C:\vcpkg\installed
            sys-package-install-command: |
              vcpkg install armadillo:x64-windows boost-config:x64-windows boost-dll:x64-windows gtest:x64-windows
            setup-env-command: |
              echo "VCPKG_ROOT=C:\vcpkg" >> $env:GITHUB_ENV
              echo "CMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake" >> $env:GITHUB_ENV
            cmake-args: "-D USE_CARMA=False"
            build-args: "--config Release"
            test-args: "--build-config Release"

    runs-on: ${{ matrix.os }}
    name: Test compilation on ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Cache system packages
        uses: actions/cache@v4
        with:
          path: ${{ matrix.sys-package-cache-path }}
          key: ${{ runner.os }}-sys-packages-${{ hashFiles('.github/workflows/build.yml') }}
          restore-keys: |
            ${{ runner.os }}-sys-packages-

      - name: Install system dependencies
        run: ${{ matrix.sys-package-install-command }}

      - name: Setup environment
        if: matrix.setup-env-command
        run: ${{ matrix.setup-env-command }}

      - name: Build project
        run: |
          cmake -B build ${{ matrix.cmake-args }}
          cmake --build build ${{ matrix.build-args }}

      - name: Run tests
        run: ctest --test-dir build ${{ matrix.test-args }}

      - name: Setup uv
        uses: astral-sh/setup-uv@v6

      - name: Create virtual environment
        run: uv venv

      - run: uv python install

      - name: Install Python dependencies
        run: uv pip install pybind11 numpy pytest

      - name: Install simcoon library (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: cmake --install build --prefix $PWD/install
        shell: bash

      - name: Install simcoon library (Windows)
        if: matrix.os == 'windows-latest'
        run: cmake --install build --config Release --prefix $PWD/install
        shell: pwsh

      - name: Build Python bindings (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          PYBIND11_DIR=$(uv run python -m pybind11 --cmakedir)
          uv run cmake -S simcoon-python-builder -B simcoon-python-builder/build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="$PWD/install;$PYBIND11_DIR"
          uv run cmake --build simcoon-python-builder/build
        shell: bash

      - name: Build Python bindings (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $PYBIND11_DIR = uv run python -m pybind11 --cmakedir
          uv run cmake -S simcoon-python-builder -B simcoon-python-builder/build `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_PREFIX_PATH="$PWD/install;C:/vcpkg/installed/x64-windows;$PYBIND11_DIR"
          uv run cmake --build simcoon-python-builder/build --config Release
        shell: pwsh

      - name: Install Python package (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          uv run cmake --install simcoon-python-builder/build --component python
          uv pip install ./python-setup
        shell: bash

      - name: Install Python package (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          uv run cmake --install simcoon-python-builder/build --config Release --component python
          uv pip install ./python-setup
          # Debug: List what files are in the installed package directory
          $SITE_PACKAGES = uv run python -c "import sysconfig; print(sysconfig.get_paths()['purelib'])"
          Write-Host "=== Files in installed simcoon package ==="
          Get-ChildItem "$SITE_PACKAGES\simcoon" | ForEach-Object { Write-Host $_.Name }
          Write-Host "==========================================="
        shell: pwsh

      - name: Run Python tests (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          cd simcoon-python-builder/test/Carma
          uv run python run_test_roundtrip.py
          uv run python run_test_arr_to_mat.py
          cd ../simmit_test
          uv run python run_test.py
        shell: bash

      - name: Run Python tests (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd simcoon-python-builder/test/Carma
          uv run python run_test_roundtrip.py
          uv run python run_test_arr_to_mat.py
          cd ../simmit_test
          uv run python run_test.py
        shell: pwsh
