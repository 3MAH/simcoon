name: Build and Test (Non-Conda)

on:
  workflow_dispatch:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            sys-package-cache-path: /var/cache/apt/archives
            sys-package-install-command: >
              sudo apt-get update &&
              sudo apt-get install -y libarmadillo-dev libboost-all-dev libgtest-dev ninja-build
            cmake-args: "-D CMAKE_BUILD_TYPE=Release -G Ninja"
            build-args: ""
            test-args: ""
          - os: macos-latest
            sys-package-cache-path: ~/Library/Caches/Homebrew
            sys-package-install-command: brew install gcc armadillo boost googletest ninja
            setup-env-command: |
              echo "FC=$(brew --prefix gcc)/bin/gfortran" >> $GITHUB_ENV
              echo "CMAKE_Fortran_COMPILER=$(brew --prefix gcc)/bin/gfortran" >> $GITHUB_ENV
            cmake-args: "-D CMAKE_BUILD_TYPE=Release -G Ninja" 
            build-args: ""
            test-args: ""
          - os: windows-latest
            sys-package-cache-path: C:\vcpkg\installed
            vcpkg-cache-path: C:\vcpkg\packages
            vcpkg-binary-cache-path: C:\Users\runneradmin\AppData\Local\vcpkg\archives
            sys-package-install-command: |
              vcpkg install --triplet x64-windows-release --recurse armadillo boost-config boost-dll gtest
            setup-env-command: |
              echo "CMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake" >> $env:GITHUB_ENV
              echo "VCPKG_DEFAULT_TRIPLET=x64-windows-release" >> $env:GITHUB_ENV
              echo "VCPKG_MAX_CONCURRENCY=$env:NUMBER_OF_PROCESSORS" >> $env:GITHUB_ENV
              echo "VCPKG_BINARY_SOURCES=clear;x-gha,readwrite" >> $env:GITHUB_ENV
            cmake-args: "-D USE_CARMA=False -G Ninja"
            build-args: ""
            test-args: "--config Release"

    runs-on: ${{ matrix.os }}
    name: Test compilation on ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Cache system packages
        uses: actions/cache@v4
        with:
          path: ${{ matrix.sys-package-cache-path }}
          key: ${{ runner.os }}-sys-packages-${{ hashFiles('.github/workflows/build.yml') }}
          restore-keys: |
            ${{ runner.os }}-sys-packages-

      - name: Cache vcpkg packages (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: |
            ${{ matrix.vcpkg-cache-path }}
            ${{ matrix.vcpkg-binary-cache-path }}
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('.github/workflows/build.yml') }}-armadillo-boost-gtest
          restore-keys: |
            ${{ runner.os }}-vcpkg-${{ hashFiles('.github/workflows/build.yml') }}-
            ${{ runner.os }}-vcpkg-

      - name: Export GitHub Actions cache environment variables (Windows)
        if: runner.os == 'Windows'
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Install system dependencies
        run: ${{ matrix.sys-package-install-command }}

      - name: Setup environment
        if: matrix.setup-env-command
        run: ${{ matrix.setup-env-command }}

      - name: Build project
        run: |
          cmake -B build ${{ matrix.cmake-args }}
          cmake --build build ${{ matrix.build-args }}

      - name: Run tests
        run: ctest --test-dir build ${{ matrix.test-args }}